---

- name: assert | Test logrotate_frequency
  ansible.builtin.assert:
    that:
      - logrotate_frequency is defined
      - logrotate_frequency is string
      - logrotate_frequency in [ "daily", "weekly", "monthly" ]
    quiet: yes

- name: assert | Test logrotate_keep
  ansible.builtin.assert:
    that:
      - logrotate_keep is defined
      - logrotate_keep is number
      - logrotate_keep >= 0
    quiet: yes

- name: assert | Test logrotate_compress
  ansible.builtin.assert:
    that:
      - logrotate_compress is defined
      - logrotate_compress is boolean
    quiet: yes

- name: assert | Test logrotate_dateext
  ansible.builtin.assert:
    that:
      - logrotate_dateext is defined
      - logrotate_dateext is boolean
    quiet: yes

- name: assert | Test logrotate_user
  ansible.builtin.assert:
    that:
      - logrotate_user is defined
      - logrotate_user is string
      - logrotate_user is not none
    quiet: yes

- name: assert | Test logrotate_group
  ansible.builtin.assert:
    that:
      - logrotate_group is defined
      - logrotate_group is string
      - logrotate_group is not none
    quiet: yes

- name: assert | Test logrotate_entries
  ansible.builtin.assert:
    that:
      - logrotate_entries is iterable
    quiet: yes
  when:
    - logrotate_entries is defined

- name: assert | Test mandatory items in logrotate_entries are set correctly
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
      - item.name is not none
      - item.path is defined
      - item.path is string
      - item.path is not none
    quiet: yes
  loop: "{{ logrotate_entries }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - logrotate_entries is defined

- name: assert | Test frequency in logrotate_entries
  ansible.builtin.assert:
    that:
      - item.frequency is string
      - item.frequency in [ "daily", "weekly", "monthly" ]
    quiet: yes
  loop: "{{ logrotate_entries }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.frequency is defined

- name: assert | Test keep in logrotate_entries
  ansible.builtin.assert:
    that:
      - item.keep is number
      - item.keep >= 1
    quiet: yes
  loop: "{{ logrotate_entries }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.keep is defined

- name: assert | Test compress in logrotate_entries
  ansible.builtin.assert:
    that:
      - item.compress is boolean
    quiet: yes
  loop: "{{ logrotate_entries }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.compress is defined

- name: assert | Test delaycompress in logrotate_entries
  ansible.builtin.assert:
    that:
      - item.delaycompress is boolean
    quiet: yes
  loop: "{{ logrotate_entries }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.delaycompress is defined

- name: assert | Test postrotate in logrotate_entries
  ansible.builtin.assert:
    that:
      - item.postrotate is string
      - item.postrotate is not none
    quiet: yes
  loop: "{{ logrotate_entries }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.postrotate is defined

- name: assert | Test missingok in logrotate_entries
  ansible.builtin.assert:
    that:
      - item.missingok is boolean
    quiet: yes
  loop: "{{ logrotate_entries }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.missingok is defined

- name: assert | Test nomissingok in logrotate_entries
  ansible.builtin.assert:
    that:
      - item.nomissingok is boolean
    quiet: yes
  loop: "{{ logrotate_entries }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.nomissingok is defined

- name: assert | Test create_* in logrotate_entries
  ansible.builtin.assert:
    that:
      - item.create_mode is defined
      - item.create_mode is string
      - item.create_mode is not none
      - item.create_user is defined
      - item.create_user is string
      - item.create_user is not none
      - item.create_group is defined
      - item.create_group is string
      - item.create_group is not none
    quiet: yes
  loop: "{{ logrotate_entries }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.create_mode is defined or
      item.create_user is defined or
      item.create_group is defined

- name: assert | Test minsize in logrotate_entries
  ansible.builtin.assert:
    that:
      - item.minsize is string
      - item.minsize is not none
    quiet: yes
  loop: "{{ logrotate_entries }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.minsize is defined

- name: assert | Test notifempty in logrotate_entries
  ansible.builtin.assert:
    that:
      - item.notifempty is boolean
    quiet: yes
  loop: "{{ logrotate_entries }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.notifempty is defined

- name: assert | Test copylog in logrotate_entries
  ansible.builtin.assert:
    that:
      - item.copylog is boolean
    quiet: yes
  loop: "{{ logrotate_entries }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.copylog is defined

- name: assert | Test copytruncate in logrotate_entries
  ansible.builtin.assert:
    that:
      - item.copytruncate is boolean
    quiet: yes
  loop: "{{ logrotate_entries }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.copytruncate is defined

- name: assert | Test sharedscripts in logrotate_entries
  ansible.builtin.assert:
    that:
      - item.sharedscripts is boolean
    quiet: yes
  loop: "{{ logrotate_entries }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.sharedscripts is defined

- name: assert | Test dateext in logrotate_entries
  ansible.builtin.assert:
    that:
      - item.dateext is boolean
    quiet: yes
  loop: "{{ logrotate_entries }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.dateext is defined

- name: assert | Test dateformat in logrotate_entries
  ansible.builtin.assert:
    that:
      - item.dateformat is string
      - item.dateformat is not none
    quiet: yes
  loop: "{{ logrotate_entries }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.dateformat is defined

- name: assert | Test dateyesterday in logrotate_entries
  ansible.builtin.assert:
    that:
      - item.dateyesterday is boolean
    quiet: yes
  loop: "{{ logrotate_entries }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.dateyesterday is defined

- name: assert | Variable logrotate_check_frequency is daily or hourly
  ansible.builtin.assert:
    that:
      - logrotate_check_frequency in ["daily", "hourly"]
    fail_msg: "logrotate_check_frequency must be daily or hourly"
    quiet: yes

- name: assert | Variable logrotate_set_scheduling is boolean
  ansible.builtin.assert:
    that:
      - logrotate_set_scheduling is boolean
    fail_msg: "logrotate_set_scheduling must be boolean"
    quiet: yes
